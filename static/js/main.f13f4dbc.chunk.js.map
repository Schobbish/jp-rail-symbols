{"version":3,"sources":["rail-data.ts","GeneralRailSymbol.tsx","line-symbols/GenericLineSymbol.tsx","line-symbols/index.tsx","line-symbols/JRCLineSymbol.tsx","line-symbols/JRLineSymbol.tsx","line-symbols/TNLineSymbol.tsx","line-symbols/TSLineSymbol.tsx","LineSymbol.tsx","station-symbols/GenericStationSymbol.tsx","station-symbols/JRCStationSymbol.tsx","station-symbols/index.tsx","station-symbols/JRStationSymbol.tsx","station-symbols/TNStationSymbol.tsx","station-symbols/TSStationSymbol.tsx","StationSymbol.tsx","index.tsx"],"names":["railData","JRC","fullCompanyName","lines","CF","fullLineName","lineColor","textColor","CB","CD","CJ","CC","CI","CG","CE","CA","JR","CO","JC","JB","JT","JJ","JL","JK","JE","JM","JN","JA","JS","MO","JU","JI","JY","JH","JO","TS","C","F","G","Z","H","M","Mb","N","T","Y","A","I","E","S","SR","TN","all","GeneralRailSymbol","props","line","height","split","companyData","lineData","React","GenericLineSymbol","componentName","className","style","marginTop","this","backgroundStyle","display","fontFamily","fontSize","verticalAlign","backgroundColor","border","borderColor","textSpanStyle","fontWeight","color","whiteSpace","DebugInfo","lineSymbolsIndex","generic","borderStyle","position","width","lineSpanStyle","top","left","lineHeight","textAlign","borderRadius","outerBorderStyle","innerBorderStyle","LineSymbol","SelectedLineSymbol","GenericStationSymbol","number","toString","padStart","backgroundSpanStyle","JRCStationSymbol","lineBackgroundSpanStyle","numberSpanStyle","bottom","stationSymbolsIndex","headerBorderStyle","margin","stationSpanStyle","background","StationSymbol","SelectedStationSymbol","getSelectValue","name","$","val","renderSymbolFromForm","SymbolToRender","companyAbbr","lineAbbr","stationAbbr","ReactDOM","document","getElementById","parseInt","alert","updateLineChoices","empty","append","company","on"],"mappings":"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","file":"static/js/main.f13f4dbc.chunk.js","sourcesContent":["/**\n * Contains all the line data used by this app.\n * @see RailDataType @see CompanyDataType @see LineDataType\n */\nexport const railData: RailDataType = {\n    JRC: {\n        fullCompanyName: \"JR Central\",\n        lines: {\n            CF: {\n                fullLineName: \"Ch\\u016B\\u014D Main Line\",\n                lineColor: \"#307097\",\n                textColor: \"#FFF\"\n            },\n            CB: {\n                fullLineName: \"Gotemba Line\",\n                lineColor: \"#447442\",\n                textColor: \"#FFF\"\n            },\n            CD: {\n                fullLineName: \"Iida Line\",\n                lineColor: \"#6CA2D6\",\n                textColor: \"#FFF\"\n            },\n            CJ: {\n                fullLineName: \"Kansai Main Line\",\n                lineColor: \"#0FB68F\",\n                textColor: \"#FFF\"\n            },\n            CC: {\n                fullLineName: \"Minobu Line\",\n                lineColor: \"#753A97\",\n                textColor: \"#FFF\"\n            },\n            CI: {\n                fullLineName: \"Taita Line\",\n                lineColor: \"#C7B944\",\n                textColor: \"#FFF\"\n            },\n            CG: {\n                fullLineName: \"Takayama Main Line\",\n                lineColor: \"#9E1311\",\n                textColor: \"#FFF\"\n            },\n            CE: {\n                fullLineName: \"Taketoyo Line\",\n                lineColor: \"#8C5837\",\n                textColor: \"#FFF\"\n            },\n            CA: {\n                fullLineName: \"T\\u014Dkaid\\u014D Main Line\",\n                lineColor: \"#F47921\",\n                textColor: \"#FFF\"\n            }\n        }\n    },\n    JR: {\n        fullCompanyName: \"JR East\",\n        lines: {\n            CO: {\n                fullLineName: \"Ch\\u016B\\u014D Main Line\",\n                lineColor: \"#007BBE\",\n                textColor: \"#000\"\n            },\n            JC: {\n                fullLineName: \"Ch\\u016B\\u014D Line (Rapid), Itsukaichi Line, \\u014Cme Line\",\n                lineColor: \"#FF4500\",\n                textColor: \"#000\"\n            },\n            JB: {\n                fullLineName: \"Ch\\u016B\\u014D\\u2013S\\u014Dbu Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JT: {\n                fullLineName: \"It\\u014D Line\",\n                lineColor: \"#FFA500\",\n                textColor: \"#000\"\n            },\n            JJ: {\n                fullLineName: \"J\\u014D Line (Local)\",\n                lineColor: \"#3CB371\",\n                textColor: \"#000\"\n            },\n            JL: {\n                fullLineName: \"J\\u014D Line (Rapid)\",\n                lineColor: \"#808080\",\n                textColor: \"#000\"\n            },\n            JK: {\n                fullLineName: \"Keihin\\u2013T\\u014Dhoku Line, Negishi Line\",\n                lineColor: \"#00BFFF\",\n                textColor: \"#000\"\n            },\n            JE: {\n                fullLineName: \"Keiy\\u014D Line\",\n                lineColor: \"#DC143C\",\n                textColor: \"#000\"\n            },\n            JM: {\n                fullLineName: \"Musashino Line\",\n                lineColor: \"#FF4500\",\n                textColor: \"#000\"\n            },\n            JN: {\n                fullLineName: \"Nambu Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JA: {\n                fullLineName: \"Saiky\\u014D Line\",\n                lineColor: \"#2E8B57\",\n                textColor: \"#000\"\n            },\n            JS: {\n                fullLineName: \"Sh\\u014Dnan\\u2013Shinjuku Line\",\n                lineColor: \"#FF0000\",\n                textColor: \"#000\"\n            },\n            MO: {\n                fullLineName: \"Tokyo Monorail\",\n                lineColor: \"#000080\",\n                textColor: \"#000\"\n            },\n            JU: {\n                fullLineName: \"Utsunomiya Line, T\\u014Dhoku Main Line, Takasaki Line\",\n                lineColor: \"#FFA500\",\n                textColor: \"#000\"\n            },\n            JI: {\n                fullLineName: \"Tsurumi Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JY: {\n                fullLineName: \"Yamanote Line\",\n                lineColor: \"#9ACD32\",\n                textColor: \"#000\"\n            },\n            JH: {\n                fullLineName: \"Yokohama Line\",\n                lineColor: \"#9ACD32\",\n                textColor: \"#000\"\n            },\n            JO: {\n                fullLineName: \"Yokosuka Line\",\n                lineColor: \"#0070B9\",\n                textColor: \"#000\"\n            }\n        }\n    },\n    TS: {\n        fullCompanyName: \"Tokyo Subway\",\n        lines: {\n            C: {\n                fullLineName: \"Tokyo Metro Chiyoda Line\",\n                lineColor: \"#00BB85\",\n                textColor: \"#000\"\n            },\n            F: {\n                fullLineName: \"Tokyo Metro Fukutoshin Line\",\n                lineColor: \"#9C5E31\",\n                textColor: \"#000\"\n            },\n            G: {\n                fullLineName: \"Tokyo Metro Ginza Line\",\n                lineColor: \"#FF9500\",\n                textColor: \"#000\"\n            },\n            Z: {\n                fullLineName: \"Tokyo Metro Hanz\\u014Dmon Line\",\n                lineColor: \"#8F76D6\",\n                textColor: \"#000\"\n            },\n            H: {\n                fullLineName: \"Tokyo Metro Hibiya Line\",\n                lineColor: \"#B5B5AC\",\n                textColor: \"#000\"\n            },\n            M: {\n                fullLineName: \"Tokyo Metro Marunouchi Line\",\n                lineColor: \"#F62E36\",\n                textColor: \"#000\"\n            },\n            Mb: {\n                fullLineName: \"Tokyo Metro Marunouchi Line Honancho Branch\",\n                lineColor: \"#F62E36\",\n                textColor: \"#000\"\n            },\n            N: {\n                fullLineName: \"Tokyo Metro Namboku Line\",\n                lineColor: \"#00AC9B\",\n                textColor: \"#000\"\n            },\n            T: {\n                fullLineName: \"Tokyo Metro Tozai Line\",\n                lineColor: \"#009BBF\",\n                textColor: \"#000\"\n            },\n            Y: {\n                fullLineName: \"Tokyo Metro Y\\u016Brakuch\\u014D Line\",\n                lineColor: \"#C1A470\",\n                textColor: \"#000\"\n            },\n            A: {\n                fullLineName: \"Toei Asakusa Line\",\n                lineColor: \"#EC6E65\",\n                textColor: \"#000\"\n            },\n            I: {\n                fullLineName: \"Toei Mita Line\",\n                lineColor: \"#006CB6\",\n                textColor: \"#000\"\n            },\n            E: {\n                fullLineName: \"Toei \\u014Cedo Line\",\n                lineColor: \"#CE045B\",\n                textColor: \"#000\"\n            },\n            S: {\n                fullLineName: \"Toei Shinjuku Line\",\n                lineColor: \"#B0C124\",\n                textColor: \"#000\"\n            },\n            SR: {\n                fullLineName: \"Saitama Rapid Railway Line\",\n                lineColor: \"#345CAA\",\n                textColor: \"#000\"\n            }\n        }\n    },\n    TN: {\n        fullCompanyName: \"Toei Nippori-Toneri Liner\",\n        lines: {\n            all: {\n                fullLineName: \"Nippori-Toneri Liner\",\n                lineColor: \"#E53A7F\", // outer border only\n                textColor: \"#000\"\n            }\n        }\n    }\n};\ntype RailDataType = {\n    /**\n     * Object of data for the companies we're dealing with, indexed by the\n     *  company abbreviations used on Wikipedia templates (or stuff I make up).\n     */\n    [companyAbbr: string]: CompanyDataType;\n};\ntype CompanyDataType = {\n    /** Aids readability and also may be useful. */\n    fullCompanyName: string,\n    /** Object of line data for this company, indexed by line abbreviation. */\n    lines: {\n        [lineAbbr: string]: LineDataType;\n    };\n};\ntype LineDataType = {\n    /** Aids readability and also may be useful. */\n    fullLineName: string,\n    /**\n     * Main color of this line and its symbols.\n     * @see RailSymbolProps.lineColor\n     */\n    lineColor: string,\n    /**\n     * Color used for the line name (and station numbers if they are the same).\n     * @see RailSymbolProps.textColor\n     */\n    textColor: string;\n};\n\nexport default railData;\n","import * as React from \"react\";\nimport { railData } from \"./rail-data\";\n\n\n/**\n * This class contains the shared functions for `GenericStationSymbol` and\n *  `GenericLineSymbol` (currently only the constructor).\n */\n// https://stackoverflow.com/a/39124219 but lazy\nexport class GeneralRailSymbol<T extends RailSymbolProps> extends React.Component<T> {\n    /** `this.props.line` separated into company (0) and line (1) components. */\n    line: Array<string>;\n    /** Actual line color to use based on default value, props, and line. */\n    lineColor: string;\n    /** Actual text color to use based on default value, props, and line. */\n    textColor: string;\n    /** Actual height to use based on default value and props. */\n    height: string;\n\n    /** Constructor determines colors and height to use based on props. */\n    constructor(props: T) {\n        super(props);\n\n        this.line = this.props.line.split(\":\");\n        this.lineColor = this.props.lineColor ? this.props.lineColor : \"#000\";\n        this.textColor = this.props.textColor ? this.props.textColor : \"#FFF\";\n        this.height = this.props.height ? this.props.height : \"1rem\";\n\n        let companyData = railData[this.line[0]];\n        // if company is in railData and one of color props not assigned,\n        // try \"all\" key then specified line\n        if (companyData && (!this.props.lineColor || !this.props.textColor)) {\n            let lineData = companyData.lines.all ? companyData.lines.all : companyData.lines[this.line[1]];\n\n            // if something worked back there then overwrite colors\n            if (lineData) {\n                if (!this.props.lineColor)\n                    this.lineColor = lineData.lineColor;\n                if (!this.props.textColor)\n                    this.textColor = lineData.textColor;\n            }\n        }\n    }\n}\nexport type RailSymbolProps = {\n    /**\n     * String representing the company and the line of the station.\n     *  Must use format `<companyAbbr>:<lineAbbr>` (@see rail-data.ts ).\n     *  JRE station symbols may have another component `stationAbbr` to render\n     *  the header station name used for major stations (@see JRStationSymbol ).\n     *\n     * In `StationSymbol` and `LineSymbol`, `companyAbbr` will determine which\n     *  component is ultimately used to render the symbol. If omitted,\n     *  `GenericStationSymbol` or `GenericLineSymbol`will be used.\n     *\n     * `lineAbbr` determines the letters shown on the symbol as well as its\n     *  colors. The colors can usually be overwritten by props `lineColor` and\n     *  `textColor`.\n     */\n    line: string,\n\n    /**\n     * CSS color value to assign to the background or border color.\n     *  @default #000 or inferred from prop `line` (so this can overwrite that).\n     *\n     * Some symbols (mainly the ones for small companies) use more than one\n     *  color, and only one (if any) of those colors can be overriden here.\n     */\n    lineColor?: string,\n\n    /**\n     * CSS color value to assign to the text color.\n     *  @default #FFF or inferred from prop `line` (so this can overwrite that).\n     *\n     * If the line name and number are different colors, this prop determines\n     *  the line name color.\n     */\n    textColor?: string,\n\n    /** CSS length value to assign to the height of the symbol. @default 1rem */\n    height?: string;\n};\n\n\nexport default GeneralRailSymbol;\n","import { CSSProperties } from \"react\";\nimport { GeneralRailSymbol, RailSymbolProps } from \"../GeneralRailSymbol\";\n\n\n/**\n * Boring default line symbol also used as base for other line symbols.\n *\n * Note that height determines the font size here.\n *\n * Based on https://en.wikipedia.org/wiki/Template:RouteBox\n */\nexport class GenericLineSymbol extends GeneralRailSymbol<RailSymbolProps> {\n    /**\n     * Show some debug info for this symbol. Call as a function in braces, not\n     *  as an element (which may not be safe but whatever it's just debug info).\n     * @param componentName Name of symbol's type (idk better way).\n     * @returns div.debug-info with info of this component.\n     */\n    DebugInfo(componentName: string): JSX.Element {\n        return (\n            <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                <h2>{componentName} Info</h2>\n                <ul>\n                    <li>Full line string: {this.props.line}</li>\n                    <li>Company: {this.line[0]}</li>\n                    <li>Line: {this.line[1]}</li>\n                    <li>Line Color: {this.lineColor}</li>\n                    <li>Text Color: {this.textColor}</li>\n                    <li>Height: {this.height}</li>\n                </ul>\n            </div>\n        );\n    };\n\n    render(): JSX.Element {\n        const backgroundStyle: CSSProperties = {\n            display: \"inline\",\n            fontFamily: \"sans-serif\",\n            fontSize: this.height,\n            verticalAlign: \"middle\",\n            backgroundColor: this.lineColor,\n            border: `0.1em solid`,\n            borderColor: this.lineColor\n        };\n        const textSpanStyle: CSSProperties = {\n            fontWeight: \"bold\",\n            color: this.textColor,\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"line-symbol generic-line-symbol\" style={backgroundStyle}>\n                    &nbsp;\n                    <span style={textSpanStyle}>{this.line[1]}</span>\n                    &nbsp;\n                </div>\n                {this.DebugInfo(\"GenericLineSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default GenericLineSymbol;\n","import GenericLineSymbol from \"./GenericLineSymbol\";\nimport JRCLineSymbol from \"./JRCLineSymbol\";\nimport JRLineSymbol from \"./JRLineSymbol\";\nimport TNLineSymbol from \"./TNLineSymbol\";\nimport TSLineSymbol from \"./TSLineSymbol\";\n\n/** Big ol' object of all the available line symbols */\nexport const lineSymbolsIndex: { [companyAbbr: string]: typeof GenericLineSymbol; } = {\n    generic: GenericLineSymbol,\n    JRC: JRCLineSymbol,\n    JR: JRLineSymbol,\n    TN: TNLineSymbol,\n    TS: TSLineSymbol\n};\n\nexport default lineSymbolsIndex;\n","import { CSSProperties } from \"react\";\nimport GenericLineSymbol from \"./GenericLineSymbol\";\n\n\n/**\n * Line symbols for JR Central\n *\n * Based on JR East but without a white background\n */\nexport class JRCLineSymbol extends GenericLineSymbol {\n    render(): JSX.Element {\n        const borderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 9 / 10)`,\n            height: `calc(${this.height} * 9 / 10)`,\n            fontSize: `calc(${this.height} * 3 / 4)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            verticalAlign: \"middle\",\n            color: this.textColor,\n            backgroundColor: this.lineColor,\n            border: `calc(${this.height} / 20) solid`,\n            borderColor: this.lineColor\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * 4 / 20)`,\n            left: 0,\n            width: `calc(${this.height} * 9 / 10)`,\n            height: `calc(${this.height} / 2)`,\n            fontSize: this.line[1] && this.line[1][1] ? \"80%\" : \"inherit\",\n            lineHeight: `calc(${this.height} / 2)`,\n            textAlign: \"center\",\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"line-symbol JR-line-symbol\" style={borderStyle}>\n                    <span style={lineSpanStyle}>{this.line[1]}</span>\n                </div>\n                {this.DebugInfo(\"JRCLineSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default JRCLineSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericLineSymbol from \"./GenericLineSymbol\";\n\n\n/**\n * Line symbols for JR East\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRE_Line_Symbol\n */\nexport class JRLineSymbol extends GenericLineSymbol {\n    render(): JSX.Element {\n        const borderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 4 / 5)`,\n            height: `calc(${this.height} * 4 / 5)`,\n            fontSize: `calc(${this.height} / 2)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            verticalAlign: \"middle\",\n            color: this.textColor,\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} / 10) solid`,\n            borderRadius: \"10%\",\n            borderColor: this.lineColor\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * 3 / 20)`,\n            left: 0,\n            width: `calc(${this.height} * 4 / 5)`,\n            height: `calc(${this.height} / 2)`,\n            fontSize: this.line[1] && this.line[1][1] ? \"80%\" : \"inherit\",\n            lineHeight: `calc(${this.height} / 2)`,\n            textAlign: \"center\",\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"line-symbol JR-line-symbol\" style={borderStyle}>\n                    <span style={lineSpanStyle}>{this.line[1]}</span>\n                </div>\n                {this.DebugInfo(\"JRLineSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default JRLineSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericLineSymbol from \"./GenericLineSymbol\";\n\n\n/**\n * Line symbols for JR East\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRE_Line_Symbol\n */\nexport class TNLineSymbol extends GenericLineSymbol {\n    render(): JSX.Element {\n        const outerBorderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 21 / 25)`,\n            height: `calc(${this.height} * 21 / 25)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            color: this.textColor,\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} * 2 / 25) solid`,\n            borderColor: this.lineColor,\n            borderRadius: `calc(${this.height} * 3 / 20)`\n        };\n        const innerBorderStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * 3 / 50)`,\n            left: `calc(${this.height} * 3 / 50)`,\n            width: `calc(${this.height} * 16 / 25)`,\n            height: `calc(${this.height} * 16 / 25)`,\n            border: `calc(${this.height} * 2 / 50) solid #6EBE44`,\n            borderRadius: `calc(${this.height} / 50)`\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} / 10)`,\n            left: 0,\n            width: `calc(${this.height} * 33 / 50)`,\n            height: `calc(${this.height} * 11 / 25)`,\n            fontSize: `calc(${this.height} * 11 / 25)`,\n            lineHeight: `calc(${this.height} * 11 / 25)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n\n        return (\n            <div>\n                <div className=\"line-symbol TN-line-symbol\" style={outerBorderStyle}>\n                    <span style={innerBorderStyle}>\n                        <span style={lineSpanStyle}>NT</span>\n                    </span>\n                </div>\n                {this.DebugInfo(\"TNLineSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default TNLineSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericLineSymbol from \"./GenericLineSymbol\";\n\n\n/**\n * Line symbols for JR East\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRE_Line_Symbol\n */\nexport class TSLineSymbol extends GenericLineSymbol {\n    render(): JSX.Element {\n        const borderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 13 / 25)`,\n            height: `calc(${this.height} * 13 / 25)`,\n            fontSize: `calc(${this.height} * 2 / 5)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            verticalAlign: \"middle\",\n            textAlign: \"center\",\n            color: this.textColor,\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} * 6 / 25) solid`,\n            borderRadius: \"50%\",\n            borderColor: this.lineColor\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * 3 / 50)`,\n            left: 0,\n            width: `calc(${this.height} * 13 / 25)`,\n            height: `calc(${this.height} * 2 / 5)`,\n            fontSize: this.line[1] && this.line[1][1] ? \"80%\" : \"inherit\",\n            lineHeight: `calc(${this.height} * 2 / 5)`,\n            textAlign: \"center\",\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"line-symbol TS-line-symbol\" style={borderStyle}>\n                    <span style={lineSpanStyle}>{this.line[1]}</span>\n                </div>\n                {this.DebugInfo(\"TSLineSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default TSLineSymbol;\n","import lineSymbolsIndex from \"./line-symbols\";\nimport GenericLineSymbol from \"./line-symbols/GenericLineSymbol\";\n\n\n/**\n * This special line symbol component chooses which company line symbol to\n *  use based on the `companyAbbr` component of prop `line`.\n *\n * If `companyAbbr` is omitted or is not in `lineSymbolsIndex`,\n *  `GenericLineSymbol` is selected.\n */\nexport class LineSymbol extends GenericLineSymbol {\n    render(): JSX.Element {\n        let SelectedLineSymbol = lineSymbolsIndex[this.line[0]]\n            ? lineSymbolsIndex[this.line[0]] : lineSymbolsIndex.generic;\n\n        return (\n            <SelectedLineSymbol\n                line={this.props.line}\n                lineColor={this.props.lineColor}\n                textColor={this.props.textColor}\n                height={this.props.height}\n            />\n        );\n    }\n}\n\n\nexport default LineSymbol;\n","import { CSSProperties } from \"react\";\nimport { GeneralRailSymbol, RailSymbolProps } from \"../GeneralRailSymbol\";\n\n\n/**\n * Boring default station symbol also used as base for other station symbols.\n *\n * Note that height determines the font size here.\n *\n * Based on https://en.wikipedia.org/wiki/Template:RouteBox\n */\nexport class GenericStationSymbol extends GeneralRailSymbol<StationSymbolProps> {\n    /** `this.props.number` formatted as two-digit string. */\n    // this is also done for consistency so `this.props` is not needed anymore.\n    number: string;\n\n    /** Constructor only needed to set `this.number`. */\n    constructor(props: StationSymbolProps) {\n        super(props);\n\n        this.number = this.props.number.toString().padStart(2, \"0\");\n    }\n\n    /**\n     * Show some debug info for this symbol. Call as a function in braces, not\n     *  as an element (which may not be safe but whatever it's just debug info).\n     * @param componentName Name of symbol's type (idk better way).\n     * @returns div.debug-info with info of this component.\n     */\n    DebugInfo(componentName: string): JSX.Element {\n        return (\n            <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                <h2>{componentName} Info</h2>\n                <ul>\n                    <li>Full line string: {this.props.line}</li>\n                    <li>Company: {this.line[0]}</li>\n                    <li>Line: {this.line[1]}</li>\n                    <li>Number: {this.number}</li>\n                    <li>Line Color: {this.lineColor}</li>\n                    <li>Text Color: {this.textColor}</li>\n                    <li>Height: {this.height}</li>\n                </ul>\n            </div>\n        );\n    };\n\n    render(): JSX.Element {\n        const backgroundSpanStyle: CSSProperties = {\n            display: \"inline\",\n            fontFamily: \"sans-serif\",\n            fontSize: this.height,\n            verticalAlign: \"middle\",\n            backgroundColor: this.lineColor,\n            border: `0.1em solid`,\n            borderColor: this.lineColor\n        };\n        const textSpanStyle: CSSProperties = {\n            fontWeight: \"bold\",\n            color: this.textColor,\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol generic-station-symbol\" style={backgroundSpanStyle}>\n                    &nbsp;\n                    <span style={textSpanStyle}>{this.line[1] + this.number}</span>\n                    &nbsp;\n                </div>\n                {this.DebugInfo(\"GenericStationSymbol\")}\n            </div>\n        );\n    }\n}\n// extend RailSymbolProps to require a station number\ntype StationSymbolProps = RailSymbolProps & {\n    /** Two-digit number for the station (may need to be changed to string) */\n    number: number;\n};\n\n\nexport default GenericStationSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for JR Central\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRC_Station_Numbering\n */\nexport class JRCStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const borderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 21 / 25)`,\n            height: `calc(${this.height} * 21 / 25)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `solid calc(${this.height} * 2 / 25)`,\n            borderColor: this.lineColor\n        };\n        const lineBackgroundSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * -1 / 25)`,\n            left: `calc(${this.height} * -1 / 25)`,\n            width: `calc(${this.height} * 23 / 25)`,\n            height: `calc(${this.height} * 37 / 100)`,\n            backgroundColor: this.lineColor,\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * -1 / 100)`,\n            left: `calc(${this.height} * 13 / 100)`,\n            width: `calc(${this.height} * 33 / 50)`,\n            height: `calc(${this.height} * 17 / 50)`,\n            fontSize: `calc(${this.height} * 17 / 50)`,\n            lineHeight: `calc(${this.height} * 17 / 50)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.height} / 50)`,\n            left: 0,\n            width: `calc(${this.height} * 21 / 25)`,\n            height: `calc(${this.height} * 12 / 25)`,\n            fontSize: `calc(${this.height} * 3 / 5)`,\n            lineHeight: `calc(${this.height} /2)`,\n            textAlign: \"center\",\n            color: \"#000\"\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TN-station-symbol\" style={borderStyle}>\n                    <span style={lineBackgroundSpanStyle}>\n                        <span style={lineSpanStyle}>{this.line[1]}</span>\n                    </span>\n                    <span style={numberSpanStyle}>{this.number}</span>\n                </div>\n                {this.DebugInfo(\"JRCStationSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default JRCStationSymbol;\n","import GenericStationSymbol from \"./GenericStationSymbol\";\nimport JRCStationSymbol from \"./JRCStationSymbol\";\nimport JRStationSymbol from \"./JRStationSymbol\";\nimport TNStationSymbol from \"./TNStationSymbol\";\nimport TSStationSymbol from \"./TSStationSymbol\";\n\n/** Big ol' object of all the available station symbols */\nexport const stationSymbolsIndex: { [companyAbbr: string]: typeof GenericStationSymbol; } = {\n    generic: GenericStationSymbol,\n    JR: JRStationSymbol,\n    JRC: JRCStationSymbol,\n    TN: TNStationSymbol,\n    TS: TSStationSymbol,\n};\n\nexport default stationSymbolsIndex;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for JR East\n *\n * The `line` prop may optionally have an additional component which specifies a\n *  station abbreviation to put on top of the symbol. This component is also\n *  separated by a colon. Note that symbols with a header station are normally\n *  150% taller than those without.\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRE_Station_Numbering\n */\nexport class JRStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        // decide whether to render header station or not\n        // due to different heights, borderStyle, lineSpanStyle,\n        // numberSpanStyle are slightly different (unfortunately).\n        if (this.line[2]) {\n            const headerBorderStyle: CSSProperties = {\n                display: \"inline-block\",\n                position: \"relative\",\n                margin: \"1px\",\n                width: `calc(${this.height} * 4 / 5)`,\n                height: this.height,\n                fontFamily: \"sans-serif\",\n                fontSize: `calc(${this.height} * 1 / 5)`,\n                fontWeight: \"bold\",\n                lineHeight: \"100%\",\n                textAlign: \"center\",\n                verticalAlign: \"middle\",\n                backgroundColor: \"#000\",\n                borderRadius: `calc(${this.height} * 2 / 15)`\n            };\n            const stationSpanStyle: CSSProperties = {\n                position: \"absolute\",\n                top: `calc(${this.height} / 30)`,\n                left: `calc(${this.height} / 15)`,\n                width: `calc(${this.height} * 2 / 3)`,\n                fontSize: \"110%\",\n                color: \"#FFF\",\n            };\n            const borderStyle: CSSProperties = {\n                position: \"absolute\",\n                top: `calc(${this.height} * 4 / 15)`,\n                left: `calc(${this.height} / 15)`,\n                height: `calc(${this.height} * 8 / 15)`,\n                width: `calc(${this.height} * 8 / 15)`,\n                fontWeight: \"bold\",\n                textAlign: \"center\",\n                verticalAlign: \"middle\",\n                background: \"#FFF\",\n                border: `calc(${this.height} / 15) solid`,\n                borderColor: this.lineColor,\n                borderRadius: \"10%\"\n            };\n            const lineSpanStyle: CSSProperties = {\n                position: \"absolute\",\n                top: `calc(${this.height} / 75)`,\n                left: 0,\n                width: `calc(${this.height} * 8 / 15)`,\n                height: `calc(${this.height} / 5)`,\n                fontSize: `calc(${this.height} / 5)`,\n                lineHeight: `calc(${this.height} / 5)`,\n                textAlign: \"center\",\n                color: this.textColor\n            };\n            const numberSpanStyle: CSSProperties = {\n                position: \"absolute\",\n                bottom: `calc(${this.height} / 75)`,\n                left: 0,\n                width: `calc(${this.height} * 8 / 15)`,\n                height: `calc(${this.height} * 8 / 25)`,\n                fontSize: `calc(${this.height} * 8 / 25)`,\n                lineHeight: `calc(${this.height} * 8 / 25)`,\n                textAlign: \"center\",\n                color: this.textColor\n            };\n            return (\n                <div>\n                    <div\n                        className=\"station-symbol JR-station-symbol JR-major-station-symbol\"\n                        style={headerBorderStyle}\n                    >\n                        <span style={stationSpanStyle}>{this.line[2]}</span>\n                        <span style={borderStyle}>\n                            <span style={lineSpanStyle}>{this.line[1]}</span>\n                            <span style={numberSpanStyle}>{this.number}</span>\n                        </span>\n                    </div>\n                    {this.DebugInfo(\"JRStationSymbol\")}\n                </div>\n            );\n        } else {\n            const borderStyle: CSSProperties = {\n                display: \"inline-block\",\n                position: \"relative\",\n                margin: \"1px\",\n                height: `calc(${this.height} * 4 / 5)`,\n                width: `calc(${this.height} * 4 / 5)`,\n                fontFamily: \"sans-serif\",\n                fontWeight: \"bold\",\n                textAlign: \"center\",\n                verticalAlign: \"middle\",\n                background: \"#FFF\",\n                border: `calc(${this.height} / 10) solid`,\n                borderColor: this.lineColor,\n                borderRadius: \"10%\"\n            };\n            const lineSpanStyle: CSSProperties = {\n                position: \"absolute\",\n                top: `calc(${this.height} / 50)`,\n                left: 0,\n                width: `calc(${this.height} * 4 / 5)`,\n                height: `calc(${this.height} * 3 / 10)`,\n                fontSize: `calc(${this.height} * 3 / 10)`,\n                lineHeight: `calc(${this.height} * 3 / 10)`,\n                textAlign: \"center\",\n                color: this.textColor\n            };\n            const numberSpanStyle: CSSProperties = {\n                position: \"absolute\",\n                bottom: `calc(${this.height} / 50)`,\n                left: 0,\n                width: `calc(${this.height} * 4 / 5)`,\n                height: `calc(${this.height} * 12 / 25)`,\n                fontSize: `calc(${this.height} * 12 / 25)`,\n                lineHeight: `calc(${this.height} * 12 / 25)`,\n                textAlign: \"center\",\n                color: this.textColor\n            };\n            return (\n                <div>\n                    <div className=\"station-symbol JR-station-symbol\" style={borderStyle}>\n                        <span style={lineSpanStyle}>{this.line[1]}</span>\n                        <span style={numberSpanStyle}>{this.number}</span>\n                    </div>\n                    {this.DebugInfo(\"JRStationSymbol\")}\n                </div>\n            );\n        }\n    }\n}\n\n\nexport default JRStationSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for Toei Nippori-Toneri Liner\n *\n * Based on https://en.wikipedia.org/wiki/Template:Toei_Nippori-toneri_Station_Numbering\n */\nexport class TNStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const outerBorderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.height} * 21 / 25)`,\n            height: `calc(${this.height} * 21 / 25)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            color: this.textColor,\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} * 2 / 25) solid`,\n            borderColor: this.lineColor,\n            borderRadius: `calc(${this.height} * 3 / 20)`\n        };\n        const innerBorderStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.height} * 3 / 50)`,\n            left: `calc(${this.height} * 3 / 50)`,\n            width: `calc(${this.height} * 16 / 25)`,\n            height: `calc(${this.height} * 16 / 25)`,\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} * 2 / 50) solid #6EBE44`,\n            borderRadius: `calc(${this.height} / 50`\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: `calc(${this.height} * 16 / 25)`,\n            height: `calc(${this.height} * 6 / 25)`,\n            fontSize: `calc(${this.height} * 6 / 25)`,\n            lineHeight: `calc(${this.height} * 6 / 25)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.height} / 80)`,\n            left: 0,\n            width: `calc(${this.height} * 16 / 25)`,\n            height: `calc(${this.height} * 11 / 25)`,\n            fontSize: `calc(${this.height} * 11 / 25)`,\n            lineHeight: `calc(${this.height} * 11 / 25)`,\n            color: this.textColor\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TN-station-symbol\" style={outerBorderStyle}>\n                    <span style={innerBorderStyle}>\n                        <span style={lineSpanStyle}>NT</span>\n                        <span style={numberSpanStyle}>{this.number}</span>\n                    </span>\n                </div>\n                {this.DebugInfo(\"TNStationSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default TNStationSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for Tokyo Subway\n *\n * Based on https://en.wikipedia.org/wiki/Template:Tokyo_Subway_Station_Numbering\n */\nexport class TSStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const borderStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            margin: \"1px\",\n            width: `calc(${this.height} * 3 / 4)`,\n            height: `calc(${this.height} * 3 / 4)`,\n            fontSize: `calc(${this.height} * 3 / 8)`,\n            fontFamily: \"sans-serif\",\n            lineHeight: \"100%\",\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.height} / 8) solid`,\n            borderRadius: \"50%\",\n            borderColor: this.lineColor\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: this.line[1] && this.line[1][1]\n                ? `calc(${this.height} / 25)` : `calc(${this.height} / 50)`,\n            left: 0,\n            width: `calc(${this.height} * 3 / 4)`,\n            height: this.line[1] && this.line[1][1]\n                ? `calc(${this.height} * 3 / 10)` : `calc(${this.height} * 8 / 25)`,\n            fontSize: this.line[1] && this.line[1][1]\n                ? `calc(${this.height} * 3 / 10)` : `calc(${this.height} * 8 / 25)`,\n            fontWeight: \"bold\",\n            lineHeight: this.line[1] && this.line[1][1]\n                ? `calc(${this.height} * 3 / 10)` : `calc(${this.height} * 8 / 25)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.height} / 20)`,\n            left: 0,\n            width: `calc(${this.height} * 3 / 4)`,\n            height: `calc(${this.height} * 19 / 50)`,\n            fontSize: `calc(${this.height} * 19 / 50)`,\n            fontWeight: \"bold\",\n            lineHeight: `calc(${this.height} * 19 / 50)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TS-station-symbol\" style={borderStyle}>\n                    <span style={lineSpanStyle}>{this.line[1]}</span>\n                    <span style={numberSpanStyle}>{this.number}</span>\n                </div>\n                {this.DebugInfo(\"TSStationSymbol\")}\n            </div>\n        );\n    }\n}\n\n\nexport default TSStationSymbol;\n","import stationSymbolsIndex from \"./station-symbols\";\nimport GenericStationSymbol from \"./station-symbols/GenericStationSymbol\";\n\n\n/**\n * This special station symbol component chooses which company station symbol to\n *  use based on the `companyAbbr` component of prop `line`.\n *\n * If `companyAbbr` is omitted or is not in `stationSymbolsIndex`,\n *  `GenericStationSymbol` is selected.\n */\nexport class StationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        let SelectedStationSymbol = stationSymbolsIndex[this.line[0]]\n            ? stationSymbolsIndex[this.line[0]] : stationSymbolsIndex.generic;\n\n        return (\n            <SelectedStationSymbol\n                line={this.props.line}\n                number={this.props.number}\n                lineColor={this.props.lineColor}\n                textColor={this.props.textColor}\n                height={this.props.height}\n            />\n        );\n    }\n}\n\n\nexport default StationSymbol;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport $ from \"jquery\";              // jquery only needed for test website\nimport LineSymbol from \"./LineSymbol\";\nimport StationSymbol from \"./StationSymbol\";\nimport railData from \"./rail-data\"; // also only needed for test website\n\n/**\n * Gets the value of a `select` element, taking the \"other\" field into account.\n * Assuming that\n *  - The other `option` element has \"other\" as its value and\n *  - The other `input` element has id `other-<name>`\n * @param name The name/id of the `select` element.\n */\nfunction getSelectValue(name: string): string {\n    // use template to lazily force convert to string\n    return `${$(\"#\" + name).val() === \"other\"\n        ? $(\"#other-\" + name).val() : $(\"#\" + name).val()}`;\n}\n\n/**\n * Uses the values in the test website form to render a symbol\n *  Only needed for test website.\n *  Renders a line symbol only if the `number` field is set.\n */\nfunction renderSymbolFromForm(): void {\n    // only render if line is not other or other field has a value\n    if ($(\"#line\").val() !== \"other\" || $(\"#other-line\").val()) {\n        let SymbolToRender: React.ReactElement;\n        // build components of line prop\n        let companyAbbr = getSelectValue(\"company\");\n        let lineAbbr = getSelectValue(\"line\");\n        let stationAbbr = \"\";\n        // only fill in stationAbbr if JR is selected and station not none\n        if ($(\"#company\").val() === \"JR\" && $(\"#station\").val() !== \"none\") {\n            stationAbbr = \":\" + getSelectValue(\"station\");\n        }\n\n        // clear node first\n        ReactDOM.unmountComponentAtNode(document.getElementById(\"root\")!);\n\n        // decide between station and line symbol based on number field\n        if ($(\"#number\").val()) {\n            SymbolToRender = (\n                <StationSymbol\n                    line={`${companyAbbr}:${lineAbbr}${stationAbbr}`}\n                    number={parseInt(`${$(\"#number\").val()}`)}\n                    lineColor={`${$(\"#line-color\").val()}`}\n                    textColor={`${$(\"#text-color\").val()}`}\n                    height={`${$(\"#height\").val()}`}\n                />\n            );\n        } else {\n            SymbolToRender = (\n                <LineSymbol\n                    line={`${companyAbbr}:${lineAbbr}${stationAbbr}`}\n                    lineColor={`${$(\"#line-color\").val()}`}\n                    textColor={`${$(\"#text-color\").val()}`}\n                    height={`${$(\"#height\").val()}`}\n                />\n            );\n        }\n\n        ReactDOM.render(SymbolToRender, document.getElementById(\"root\"));\n    } else {\n        alert(\"Line is required!\");\n    }\n}\n\n/**\n * Dynamically updates the choices for lines based on the selected company.\n *  Only needed for testing website.\n */\nfunction updateLineChoices(): void {\n    // empty current choices first\n    $(\"#line\").empty();\n\n    // don't try if generic company is selected\n    if ($(\"#company\").val() !== \"generic\" && $(\"#company\").val() !== \"other\") {\n        for (const line in railData[`${$(\"#company\").val()}`].lines) {\n            let lineData = railData[`${$(\"#company\").val()}`].lines[line];\n\n            // yamanote line is default so it gets a `selected` attribute\n            $(\"#line\").append(`<option value=\"${line}\" ${line === \"JY\" ? \"selected\" : \"\"}>${line} - ${lineData.fullLineName}</option>`);\n        }\n    }\n    // don't forget other option (even if generic is selected)\n    $(\"#line\").append(\"<option value=\\\"other\\\">Other...</option>\");\n}\n\n$(() => {\n    // dynamically create company options\n    for (const company in railData) {\n        // jre is the default choice so it gets a `selected` attribute\n        $(\"#company\").append(`<option value=\"${company}\" ${company === \"JR\" ? \"selected\" : \"\"}>${company} - ${railData[company].fullCompanyName}</option>`);\n    }\n    $(\"#company\").append(\"<option value=\\\"generic\\\">Generic</option>\");\n    $(\"#company\").append(\"<option value=\\\"other\\\">Other...</option>\");\n\n    // do these initially as well\n    updateLineChoices();\n    renderSymbolFromForm();\n\n    $(\"#company\").on(\"change\", updateLineChoices);\n    $(\"#submit\").on(\"click\", renderSymbolFromForm);\n});\n\nexport { LineSymbol, StationSymbol };\n"],"sourceRoot":""}