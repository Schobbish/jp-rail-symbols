{"version":3,"sources":["rail-data.ts","GeneralRailSymbol.tsx","station-symbols/GenericStationSymbol.tsx","station-symbols/index.tsx","station-symbols/JRCStationSymbol.tsx","station-symbols/TNStationSymbol.tsx","station-symbols/TSStationSymbol.tsx","StationSymbol.tsx","index.tsx"],"names":["railData","JRC","fullCompanyName","lines","CF","fullLineName","lineColor","textColor","CB","CD","CJ","CC","CI","CG","CE","CA","JR","CO","JC","JB","JT","JJ","JL","JK","JE","JM","JN","JA","JS","MO","JU","JI","JY","JH","JO","TS","C","F","G","Z","H","M","Mb","N","T","Y","A","I","E","S","SR","TN","all","GeneralRailSymbol","props","line","size","split","companyData","lineData","React","GenericStationSymbol","number","toString","padStart","backgroundSpanStyle","display","fontFamily","fontSize","this","backgroundColor","border","borderColor","textSpanStyle","fontWeight","color","whiteSpace","className","style","marginTop","stationSymbolsIndex","generic","borderSpanStyle","position","width","height","verticalAlign","lineBackgroundSpanStyle","top","left","lineSpanStyle","lineHeight","textAlign","numberSpanStyle","bottom","outerBorderSpanStyle","borderRadius","innerBorderSpanStyle","margin","StationSymbol","SelectedStationSymbol","getSelectValue","name","$","val","renderSymbolFromForm","symbolToRender","companyAbbr","lineAbbr","stationAbbr","ReactDOM","document","getElementById","parseInt","alert","updateLineChoices","empty","append","company","on"],"mappings":"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","file":"static/js/main.72dba14c.chunk.js","sourcesContent":["/**\n * Contains all the line data used by this app.\n * @see RailDataType @see CompanyDataType @see LineDataType\n */\nexport const railData: RailDataType = {\n    JRC: {\n        fullCompanyName: \"JR Central\",\n        lines: {\n            CF: {\n                fullLineName: \"Ch\\u016B\\u014D Main Line\",\n                lineColor: \"#307097\",\n                textColor: \"#FFF\"\n            },\n            CB: {\n                fullLineName: \"Gotemba Line\",\n                lineColor: \"#447442\",\n                textColor: \"#FFF\"\n            },\n            CD: {\n                fullLineName: \"Iida Line\",\n                lineColor: \"#6CA2D6\",\n                textColor: \"#FFF\"\n            },\n            CJ: {\n                fullLineName: \"Kansai Main Line\",\n                lineColor: \"#0FB68F\",\n                textColor: \"#FFF\"\n            },\n            CC: {\n                fullLineName: \"Minobu Line\",\n                lineColor: \"#753A97\",\n                textColor: \"#FFF\"\n            },\n            CI: {\n                fullLineName: \"Taita Line\",\n                lineColor: \"#C7B944\",\n                textColor: \"#FFF\"\n            },\n            CG: {\n                fullLineName: \"Takayama Main Line\",\n                lineColor: \"#9E1311\",\n                textColor: \"#FFF\"\n            },\n            CE: {\n                fullLineName: \"Taketoyo Line\",\n                lineColor: \"#8C5837\",\n                textColor: \"#FFF\"\n            },\n            CA: {\n                fullLineName: \"T\\u014Dkaid\\u014D Main Line\",\n                lineColor: \"#F47921\",\n                textColor: \"#FFF\"\n            }\n        }\n    },\n    JR: {\n        fullCompanyName: \"JR East\",\n        lines: {\n            CO: {\n                fullLineName: \"Ch\\u016B\\u014D Main Line\",\n                lineColor: \"#007BBE\",\n                textColor: \"#000\"\n            },\n            JC: {\n                fullLineName: \"Ch\\u016B\\u014D Line (Rapid), Itsukaichi Line, \\u014Cme Line\",\n                lineColor: \"#FF4500\",\n                textColor: \"#000\"\n            },\n            JB: {\n                fullLineName: \"Ch\\u016B\\u014D\\u2013S\\u014Dbu Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JT: {\n                fullLineName: \"It\\u014D Line\",\n                lineColor: \"#FFA500\",\n                textColor: \"#000\"\n            },\n            JJ: {\n                fullLineName: \"J\\u014D Line (Local)\",\n                lineColor: \"#3CB371\",\n                textColor: \"#000\"\n            },\n            JL: {\n                fullLineName: \"J\\u014D Line (Rapid)\",\n                lineColor: \"#808080\",\n                textColor: \"#000\"\n            },\n            JK: {\n                fullLineName: \"Keihin\\u2013T\\u014Dhoku Line, Negishi Line\",\n                lineColor: \"#00BFFF\",\n                textColor: \"#000\"\n            },\n            JE: {\n                fullLineName: \"Keiy\\u014D Line\",\n                lineColor: \"#DC143C\",\n                textColor: \"#000\"\n            },\n            JM: {\n                fullLineName: \"Musashino Line\",\n                lineColor: \"#FF4500\",\n                textColor: \"#000\"\n            },\n            JN: {\n                fullLineName: \"Nambu Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JA: {\n                fullLineName: \"Saiky\\u014D Line\",\n                lineColor: \"#2E8B57\",\n                textColor: \"#000\"\n            },\n            JS: {\n                fullLineName: \"Sh\\u014Dnan\\u2013Shinjuku Line\",\n                lineColor: \"#FF0000\",\n                textColor: \"#000\"\n            },\n            MO: {\n                fullLineName: \"Tokyo Monorail\",\n                lineColor: \"#000080\",\n                textColor: \"#000\"\n            },\n            JU: {\n                fullLineName: \"Utsunomiya Line, T\\u014Dhoku Main Line, Takasaki Line\",\n                lineColor: \"#FFA500\",\n                textColor: \"#000\"\n            },\n            JI: {\n                fullLineName: \"Tsurumi Line\",\n                lineColor: \"#FFD700\",\n                textColor: \"#000\"\n            },\n            JY: {\n                fullLineName: \"Yamanote Line\",\n                lineColor: \"#9ACD32\",\n                textColor: \"#000\"\n            },\n            JH: {\n                fullLineName: \"Yokohama Line\",\n                lineColor: \"#9ACD32\",\n                textColor: \"#000\"\n            },\n            JO: {\n                fullLineName: \"Yokosuka Line\",\n                lineColor: \"#0070B9\",\n                textColor: \"#000\"\n            }\n        }\n    },\n    TS: {\n        fullCompanyName: \"Tokyo Subway\",\n        lines: {\n            C: {\n                fullLineName: \"Tokyo Metro Chiyoda Line\",\n                lineColor: \"#00BB85\",\n                textColor: \"#000\"\n            },\n            F: {\n                fullLineName: \"Tokyo Metro Fukutoshin Line\",\n                lineColor: \"#9C5E31\",\n                textColor: \"#000\"\n            },\n            G: {\n                fullLineName: \"Tokyo Metro Ginza Line\",\n                lineColor: \"#FF9500\",\n                textColor: \"#000\"\n            },\n            Z: {\n                fullLineName: \"Tokyo Metro Hanz\\u014Dmon Line\",\n                lineColor: \"#8F76D6\",\n                textColor: \"#000\"\n            },\n            H: {\n                fullLineName: \"Tokyo Metro Hibiya Line\",\n                lineColor: \"#B5B5AC\",\n                textColor: \"#000\"\n            },\n            M: {\n                fullLineName: \"Tokyo Metro Marunouchi Line\",\n                lineColor: \"#F62E36\",\n                textColor: \"#000\"\n            },\n            Mb: {\n                fullLineName: \"Tokyo Metro Marunouchi Line Honancho Branch\",\n                lineColor: \"#F62E36\",\n                textColor: \"#000\"\n            },\n            N: {\n                fullLineName: \"Tokyo Metro Namboku Line\",\n                lineColor: \"#00AC9B\",\n                textColor: \"#000\"\n            },\n            T: {\n                fullLineName: \"Tokyo Metro Tozai Line\",\n                lineColor: \"#009BBF\",\n                textColor: \"#000\"\n            },\n            Y: {\n                fullLineName: \"Tokyo Metro Y\\u016Brakuch\\u014D Line\",\n                lineColor: \"#C1A470\",\n                textColor: \"#000\"\n            },\n            A: {\n                fullLineName: \"Toei Asakusa Line\",\n                lineColor: \"#EC6E65\",\n                textColor: \"#000\"\n            },\n            I: {\n                fullLineName: \"Toei Mita Line\",\n                lineColor: \"#006CB6\",\n                textColor: \"#000\"\n            },\n            E: {\n                fullLineName: \"Toei \\u014Cedo Line\",\n                lineColor: \"#CE045B\",\n                textColor: \"#000\"\n            },\n            S: {\n                fullLineName: \"Toei Shinjuku Line\",\n                lineColor: \"#B0C124\",\n                textColor: \"#000\"\n            },\n            SR: {\n                fullLineName: \"Saitama Rapid Railway Line\",\n                lineColor: \"#345CAA\",\n                textColor: \"#000\"\n            }\n        }\n    },\n    TN: {\n        fullCompanyName: \"Toei Nippori-Toneri Liner\",\n        lines: {\n            all: {\n                fullLineName: \"Nippori-Toneri Liner\",\n                lineColor: \"#E53A7F\", // outer border only\n                textColor: \"#000\"\n            }\n        }\n    }\n};\ntype RailDataType = {\n    /**\n     * Object of data for the companies we're dealing with, indexed by the\n     *  company abbreviations used on Wikipedia templates (or stuff I make up).\n     */\n    [companyAbbr: string]: CompanyDataType;\n};\ntype CompanyDataType = {\n    /** Aids readability and also may be useful. */\n    fullCompanyName: string,\n    /** Object of line data for this company, indexed by line abbreviation. */\n    lines: {\n        [lineAbbr: string]: LineDataType;\n    };\n};\ntype LineDataType = {\n    /** Aids readability and also may be useful. */\n    fullLineName: string,\n    /**\n     * Main color of this line and its symbols.\n     * @see RailSymbolProps.lineColor\n     */\n    lineColor: string,\n    /**\n     * Color used for the line name (and station numbers if they are the same).\n     * @see RailSymbolProps.textColor\n     */\n    textColor: string;\n};\n\nexport default railData;\n","import * as React from \"react\";\nimport { railData } from \"./rail-data\";\n\n\n/**\n * This class contains the shared functions for `GenericStationSymbol` and\n *  `GenericLineSymbol` (currently only the constructor).\n */\n// https://stackoverflow.com/a/39124219 but lazy\nexport class GeneralRailSymbol<T extends RailSymbolProps> extends React.Component<T> {\n    /** `this.props.line` separated into company (0) and line (1) components. */\n    line: Array<string>;\n    /** Actual line color to use based on default value, props, and line. */\n    lineColor: string;\n    /** Actual text color to use based on default value, props, and line. */\n    textColor: string;\n    /** Actual size to use based on default value and props. */\n    size: string;\n\n    /** Constructor determines colors and size to use based on props. */\n    constructor(props: T) {\n        super(props);\n\n        this.line = this.props.line.split(\":\");\n        this.lineColor = this.props.lineColor ? this.props.lineColor : \"#000\";\n        this.textColor = this.props.textColor ? this.props.textColor : \"#FFF\";\n        this.size = this.props.size ? this.props.size : \"1rem\";\n\n        let companyData = railData[this.line[0]];\n        // if company is in railData and one of color props not assigned,\n        // try \"all\" key then specified line\n        if (companyData && (!this.props.lineColor || !this.props.textColor)) {\n            let lineData = companyData.lines.all ? companyData.lines.all : companyData.lines[this.line[1]];\n\n            // if something worked back there then overwrite colors\n            if (lineData) {\n                if (!this.props.lineColor)\n                    this.lineColor = lineData.lineColor;\n                if (!this.props.textColor)\n                    this.textColor = lineData.textColor;\n            }\n        }\n    }\n}\nexport type RailSymbolProps = {\n    /**\n     * String representing the company and the line of the station.\n     *  Must use format `<companyAbbr>:<lineAbbr>` (@see rail-data.ts ).\n     *  JRE station symbols may have another component `stationAbbr` to render\n     *  the station header used for major stations (@see JRStationSymbol ).\n     *\n     * In `StationSymbol` and `LineSymbol`, `companyAbbr` will determine which\n     *  component is ultimately used to render the symbol. If omitted,\n     *  `GenericStationSymbol` or `GenericLineSymbol`will be used.\n     *\n     * `lineAbbr` determines the letters shown on the symbol as well as its\n     *  colors. The colors can usually be overwritten by props `lineColor` and\n     *  `textColor`.\n     */\n    line: string,\n\n    /**\n     * CSS color value to assign to the background or border color.\n     *  @default #000 or inferred from prop `line` (so this can overwrite that).\n     *\n     * Some symbols (mainly the ones for small companies) use more than one\n     *  color, and only one (if any) of those colors can be overriden here.\n     */\n    lineColor?: string,\n\n    /**\n     * CSS color value to assign to the text color.\n     *  @default #FFF or inferred from prop `line` (so this can overwrite that).\n     *\n     * If the line name and number are different colors, this prop determines\n     *  the line name color.\n     */\n    textColor?: string,\n\n    /** CSS length value to assign to the height of the symbol. @default 1rem */\n    size?: string;\n};\n\n\nexport default GeneralRailSymbol;\n","import { CSSProperties } from \"react\";\nimport { GeneralRailSymbol, RailSymbolProps } from \"../GeneralRailSymbol\";\n\n\n/**\n * Boring default station symbol also used as base for other station symbols.\n *\n * Based on https://en.wikipedia.org/wiki/Template:RouteBox\n */\nexport class GenericStationSymbol extends GeneralRailSymbol<StationSymbolProps> {\n    /** `this.props.number` formatted as two-digit string. */\n    // this is also done for consistency so `this.props` is not needed anymore.\n    number: string;\n\n    /** Constructor only needed to set `this.number`. */\n    constructor(props: StationSymbolProps) {\n        super(props);\n\n        this.number = this.props.number.toString().padStart(2, \"0\");\n    }\n\n    render(): JSX.Element {\n        const backgroundSpanStyle: CSSProperties = {\n            display: \"inline\",\n            fontFamily: \"sans-serif\",\n            fontSize: this.size,\n            backgroundColor: this.lineColor,\n            border: `0.1em solid`,\n            borderColor: this.lineColor\n        };\n        const textSpanStyle: CSSProperties = {\n            fontWeight: \"bold\",\n            color: this.textColor,\n            whiteSpace: \"nowrap\"\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol generic-station-symbol\">\n                    <span style={backgroundSpanStyle}>\n                        &nbsp;\n                        <span style={textSpanStyle}>{this.line[1] + this.number}</span>\n                        &nbsp;\n                    </span>\n                </div>\n                <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                    <h2>GenericStationSymbol Info</h2>\n                    <ul>\n                        <li>Full line string: {this.props.line}</li>\n                        <li>Company: {this.line[0]}</li>\n                        <li>Line: {this.line[1]}</li>\n                        <li>Number: {this.number}</li>\n                        <li>Line Color: {this.lineColor}</li>\n                        <li>Text Color: {this.textColor}</li>\n                        <li>Size: {this.size}</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n// extend RailSymbolProps to require a station number\ntype StationSymbolProps = RailSymbolProps & {\n    /** Two-digit number for the station (may need to be changed to string) */\n    number: number;\n};\n\n\nexport default GenericStationSymbol;\n","import GenericStationSymbol from \"./GenericStationSymbol\";\nimport JRCStationSymbol from \"./JRCStationSymbol\";\nimport TNStationSymbol from \"./TNStationSymbol\";\nimport TSStationSymbol from \"./TSStationSymbol\";\n\n/** Big ol' object of all the available station symbols */\nexport const stationSymbolsIndex: { [companyAbbr: string]: typeof GenericStationSymbol; } = {\n    generic: GenericStationSymbol,\n    JRC: JRCStationSymbol,\n    TN: TNStationSymbol,\n    TS: TSStationSymbol,\n};\n\nexport default stationSymbolsIndex;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for JR Central\n *\n * Based on https://en.wikipedia.org/wiki/Template:JRC_Station_Numbering\n */\nexport class JRCStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const borderSpanStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.size} * 21 / 25)`,\n            height: `calc(${this.size} * 21 / 25)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `solid calc(${this.size} * 2 / 25)`,\n            borderColor: this.lineColor\n        };\n        const lineBackgroundSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.size} * -1 / 25)`,\n            left: `calc(${this.size} * -1 / 25)`,\n            width: `calc(${this.size} * 23 / 25)`,\n            height: `calc(${this.size} * 37 / 100)`,\n            backgroundColor: this.lineColor,\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.size} * -1 / 100)`,\n            left: `calc(${this.size} * 13 / 100)`,\n            width: `calc(${this.size} * 33 / 50)`,\n            height: `calc(${this.size} * 17 / 50)`,\n            fontSize: `calc(${this.size} * 17 / 50)`,\n            lineHeight: `calc(${this.size} * 17 / 50)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.size} / 50)`,\n            left: 0,\n            width: `calc(${this.size} * 21 / 25)`,\n            height: `calc(${this.size} * 12 / 25)`,\n            fontSize: `calc(${this.size} * 3 / 5)`,\n            lineHeight: `calc(${this.size} /2)`,\n            textAlign: \"center\",\n            color: \"#000\"\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TN-station-symbol\">\n                    <span style={borderSpanStyle}>\n                        <span style={lineBackgroundSpanStyle}>\n                            <span style={lineSpanStyle}>{this.line[1]}</span>\n                        </span>\n                        <span style={numberSpanStyle}>{this.number}</span>\n                    </span>\n                </div>\n                <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                    <h2>JRCStationSymbol Info</h2>\n                    <ul>\n                        <li>Full line string: {this.props.line}</li>\n                        <li>Company: {this.line[0]}</li>\n                        <li>Line: {this.line[1]}</li>\n                        <li>Number: {this.number}</li>\n                        <li>Line Color: {this.lineColor}</li>\n                        <li>Text Color: {this.textColor}</li>\n                        <li>Size: {this.size}</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default JRCStationSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for Toei Nippori-Toneri Liner\n *\n * Based on https://en.wikipedia.org/wiki/Template:Toei_Nippori-toneri_Station_Numbering\n */\nexport class TNStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const outerBorderSpanStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: `calc(${this.size} * 21 / 25)`,\n            height: `calc(${this.size} * 21 / 25)`,\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            color: this.textColor,\n            verticalAlign: \"middle\",\n            border: `calc(${this.size} * 2 / 25) solid`,\n            backgroundColor: \"#FFF\",\n            borderColor: this.lineColor,\n            borderRadius: `calc(${this.size} * 3 / 20)`\n        };\n        const innerBorderSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: `calc(${this.size} * 3 / 50)`,\n            left: `calc(${this.size} * 3 / 50)`,\n            width: `calc(${this.size} * 16 / 25)`,\n            height: `calc(${this.size} * 16 / 25)`,\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.size} * 2 / 50) solid #6EBE44`,\n            borderRadius: `calc(${this.size} / 50`\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: `calc(${this.size} * 16 / 25)`,\n            height: `calc(${this.size} * 6 / 25)`,\n            fontSize: `calc(${this.size} * 6 / 25)`,\n            lineHeight: `calc(${this.size} * 6 / 25)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.size} / 80)`,\n            left: 0,\n            width: `calc(${this.size} * 16 / 25)`,\n            height: `calc(${this.size} * 11 / 25)`,\n            fontSize: `calc(${this.size} * 11 / 25)`,\n            lineHeight: `calc(${this.size} * 11 / 25)`,\n            color: this.textColor\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TN-station-symbol\">\n                    <span style={outerBorderSpanStyle}>\n                        <span style={innerBorderSpanStyle}>\n                            <span style={lineSpanStyle}>NT</span>\n                            <span style={numberSpanStyle}>{this.number}</span>\n                        </span>\n                    </span>\n                </div>\n                <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                    <h2>TNStationSymbol Info</h2>\n                    <ul>\n                        <li>Full line string: {this.props.line}</li>\n                        <li>Company: {this.line[0]}</li>\n                        <li>Line: {this.line[1]}</li>\n                        <li>Number: {this.number}</li>\n                        <li>Line Color: {this.lineColor}</li>\n                        <li>Text Color: {this.textColor}</li>\n                        <li>Size: {this.size}</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default TNStationSymbol;\n","import { CSSProperties } from \"react\";\nimport GenericStationSymbol from \"./GenericStationSymbol\";\n\n\n/**\n * Station symbols for Tokyo Subway\n *\n * Based on https://en.wikipedia.org/wiki/Template:Tokyo_Subway_Station_Numbering\n */\nexport class TSStationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        const borderSpanStyle: CSSProperties = {\n            display: \"inline-block\",\n            position: \"relative\",\n            margin: \"1px\",\n            width: `calc(${this.size} * 3 / 4)`,\n            height: `calc(${this.size} * 3 / 4)`,\n            fontSize: `calc(${this.size} * 3 / 8)`,\n            fontFamily: \"sans-serif\",\n            lineHeight: \"100%\",\n            verticalAlign: \"middle\",\n            backgroundColor: \"#FFF\",\n            border: `calc(${this.size} / 8) solid`,\n            borderRadius: \"50%\",\n            borderColor: this.lineColor\n        };\n        const lineSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            top: this.line[1] && this.line[1][1]\n                ? `calc(${this.size} / 25)` : `calc(${this.size} / 50)`,\n            left: 0,\n            width: `calc(${this.size} * 3 / 4)`,\n            height: this.line[1] && this.line[1][1]\n                ? `calc(${this.size} * 3 / 10)` : `calc(${this.size} * 8 / 25)`,\n            fontSize: this.line[1] && this.line[1][1]\n                ? `calc(${this.size} * 3 / 10)` : `calc(${this.size} * 8 / 25)`,\n            fontWeight: \"bold\",\n            lineHeight: this.line[1] && this.line[1][1]\n                ? `calc(${this.size} * 3 / 10)` : `calc(${this.size} * 8 / 25)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n        const numberSpanStyle: CSSProperties = {\n            position: \"absolute\",\n            bottom: `calc(${this.size} / 20)`,\n            left: 0,\n            width: `calc(${this.size} * 3 / 4)`,\n            height: `calc(${this.size} * 19 / 50)`,\n            fontSize: `calc(${this.size} * 19 / 50)`,\n            fontWeight: \"bold\",\n            lineHeight: `calc(${this.size} * 19 / 50)`,\n            textAlign: \"center\",\n            color: this.textColor\n        };\n\n        return (\n            <div>\n                <div className=\"station-symbol TS-station-symbol\">\n                    <span style={borderSpanStyle}>\n                        <span style={lineSpanStyle}>{this.line[1]}</span>\n                        <span style={numberSpanStyle}>{this.number}</span></span>\n                </div>\n                <div className=\"debug-info\" style={{ marginTop: \"3rem\" }}>\n                    <h2>TSStationSymbol Info</h2>\n                    <ul>\n                        <li>Full line string: {this.props.line}</li>\n                        <li>Company: {this.line[0]}</li>\n                        <li>Line: {this.line[1]}</li>\n                        <li>Number: {this.number}</li>\n                        <li>Line Color: {this.lineColor}</li>\n                        <li>Text Color: {this.textColor}</li>\n                        <li>Size: {this.size}</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default TSStationSymbol;\n","import stationSymbolsIndex from \"./station-symbols\";\nimport GenericStationSymbol from \"./station-symbols/GenericStationSymbol\";\n\n\n/**\n * This special station symbol component chooses which company station symbol to\n *  use based on the `companyAbbr` component of prop `line`.\n *\n * If `companyAbbr` is omitted or is not in `stationSymbolsIndex`,\n *  `GenericStationSymbol` is selected.\n */\nexport class StationSymbol extends GenericStationSymbol {\n    render(): JSX.Element {\n        let SelectedStationSymbol = stationSymbolsIndex[this.line[0]]\n            ? stationSymbolsIndex[this.line[0]] : stationSymbolsIndex.generic;\n\n        return (\n            <SelectedStationSymbol\n                line={this.props.line}\n                number={this.props.number}\n                lineColor={this.props.lineColor}\n                textColor={this.props.textColor}\n                size={this.props.size}\n            />\n        );\n    }\n}\n\n\nexport default StationSymbol;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport $ from \"jquery\";              // jquery only needed for test website\n// eslint-disable-next-line\nimport LineSymbol from \"./LineSymbol\";\nimport StationSymbol from \"./StationSymbol\";\nimport railData from \"./rail-data\"; // also only needed for test website\n\n/**\n * Gets the value of a `select` element, taking the \"other\" field into account.\n * Assuming that\n *  - The other `option` element has \"other\" as its value and\n *  - The other `input` element has id `other-<name>`\n * @param name The name/id of the `select` element.\n */\nfunction getSelectValue(name: string): string {\n    // use template to lazily force convert to string\n    return `${$(\"#\" + name).val() === \"other\"\n        ? $(\"#other-\" + name).val() : $(\"#\" + name).val()}`;\n}\n\n/**\n * Uses the values in the test website form to render a symbol\n *  Only needed for test website.\n *  Renders a line symbol only if the `number` field is set.\n */\nfunction renderSymbolFromForm(): void {\n    // only render if line is not other or other field has a value\n    if ($(\"#line\").val() !== \"other\" || $(\"#other-line\").val()) {\n        let symbolToRender: React.ReactElement;\n        // build components of line prop\n        let companyAbbr = getSelectValue(\"company\");\n        let lineAbbr = getSelectValue(\"line\");\n        let stationAbbr = \"\";\n        // only fill in stationAbbr if JR is selected and station not none\n        if ($(\"#company\").val() === \"JR\" && $(\"#station\").val() !== \"none\") {\n            stationAbbr = \":\" + getSelectValue(\"station\");\n        }\n\n        // clear node first\n        ReactDOM.unmountComponentAtNode(document.getElementById(\"root\")!);\n\n        // decide between station and line symbol based on number field\n        if ($(\"#number\").val()) {\n            symbolToRender = (\n                <StationSymbol\n                    line={`${companyAbbr}:${lineAbbr}${stationAbbr}`}\n                    number={parseInt(`${$(\"#number\").val()}`)}\n                    lineColor={`${$(\"#line-color\").val()}`}\n                    textColor={`${$(\"#text-color\").val()}`}\n                    size={`${$(\"#size\").val()}`}\n                />\n            );\n        } else {\n            symbolToRender = (\n                <p>line symbol support coming later; please fill in station number</p>\n            );\n        }\n\n        ReactDOM.render(symbolToRender, document.getElementById(\"root\"));\n    } else {\n        alert(\"Line is required!\");\n    }\n}\n\n/**\n * Dynamically updates the choices for lines based on the selected company.\n *  Only needed for testing website.\n */\nfunction updateLineChoices(): void {\n    // empty current choices first\n    $(\"#line\").empty();\n\n    // don't try if generic company is selected\n    if ($(\"#company\").val() !== \"generic\" && $(\"#company\").val() !== \"other\") {\n        for (const line in railData[`${$(\"#company\").val()}`].lines) {\n            let lineData = railData[`${$(\"#company\").val()}`].lines[line];\n\n            // yamanote line is default so it gets a `selected` attribute\n            $(\"#line\").append(`<option value=\"${line}\" ${line === \"JY\" ? \"selected\" : \"\"}>${line} - ${lineData.fullLineName}</option>`);\n        }\n    }\n    // don't forget other option (even if generic is selected)\n    $(\"#line\").append(\"<option value=\\\"other\\\">Other...</option>\");\n}\n\n$(() => {\n    // dynamically create company options\n    for (const company in railData) {\n        // jre is the default choice so it gets a `selected` attribute\n        $(\"#company\").append(`<option value=\"${company}\" ${company === \"JR\" ? \"selected\" : \"\"}>${company} - ${railData[company].fullCompanyName}</option>`);\n    }\n    $(\"#company\").append(\"<option value=\\\"generic\\\">Generic</option>\");\n    $(\"#company\").append(\"<option value=\\\"other\\\">Other...</option>\");\n\n    // do these initially as well\n    updateLineChoices();\n    renderSymbolFromForm();\n\n    $(\"#company\").on(\"change\", updateLineChoices);\n    $(\"#submit\").on(\"click\", renderSymbolFromForm);\n});\n"],"sourceRoot":""}